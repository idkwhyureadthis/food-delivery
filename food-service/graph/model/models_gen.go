// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type NewProduct struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	HasSizes    bool      `json:"hasSizes"`
	Prices      []float64 `json:"prices"`
}

type NewUser struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

type Order struct {
	ID         int64      `json:"id"`
	Items      []*Product `json:"items"`
	TotalPrice float64    `json:"total_price"`
}

type Product struct {
	ID          int64        `json:"id"`
	Name        string       `json:"name"`
	Description string       `json:"description"`
	Size        *ProductSize `json:"size,omitempty"`
	Price       []float64    `json:"price"`
}

type Query struct {
}

type RemovedUser struct {
	ID int64 `json:"id"`
}

type Tokens struct {
	Refresh string `json:"refresh"`
	Access  string `json:"access"`
}

type TokensWithCrypted struct {
	Refresh        string `json:"refresh"`
	Access         string `json:"access"`
	CryptedRefresh string `json:"crypted_refresh"`
}

type User struct {
	ID     int64    `json:"id"`
	Name   string   `json:"name"`
	Orders []*Order `json:"orders"`
	Tokens *Tokens  `json:"tokens,omitempty"`
}

type ProductSize string

const (
	ProductSizeSmall  ProductSize = "Small"
	ProductSizeMedium ProductSize = "Medium"
	ProductSizeLarge  ProductSize = "Large"
)

var AllProductSize = []ProductSize{
	ProductSizeSmall,
	ProductSizeMedium,
	ProductSizeLarge,
}

func (e ProductSize) IsValid() bool {
	switch e {
	case ProductSizeSmall, ProductSizeMedium, ProductSizeLarge:
		return true
	}
	return false
}

func (e ProductSize) String() string {
	return string(e)
}

func (e *ProductSize) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductSize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductSize", str)
	}
	return nil
}

func (e ProductSize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
