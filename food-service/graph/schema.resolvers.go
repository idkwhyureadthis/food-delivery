package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/idkwhyureadthis/food-service/graph/model"
	"github.com/idkwhyureadthis/food-service/internal/service"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.NewUser) (*model.User, error) {
	newUser, err := service.CreateNewUser(input.Name, input.Password, input.About)
	if err != nil {
		graphql.AddError(ctx, err)
		return nil, err
	}
	return newUser, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input *model.RemovedUser) (string, error) {
	return service.DeleteUser(ctx)
}

// AddProduct is the resolver for the addProduct field.
func (r *mutationResolver) AddProduct(ctx context.Context, input *model.NewProduct) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: AddProduct - addProduct"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, userID int64) (*model.User, error) {
	user, err := service.GetUser(userID)
	if err != nil {
		graphql.AddError(ctx, err)
		return nil, err
	}
	return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
